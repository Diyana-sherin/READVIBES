<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      margin: 0;
    }

    #container {
      display: flex;
      flex-wrap: wrap;
      gap: 40px;
      max-width: 1200px;
      margin: auto;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
      }
    }

    .billing-form {
      flex: 1;
      min-width: 600px;
      background-color: #ffffff;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .billing-form h2 {
      font-size: 1.5em;
      margin-bottom: 20px;
    }

    .billing-form label {
      display: block;
      font-size: 0.9em;
      margin-bottom: 5px;
      color: #555;
    }

    .billing-form input[type="text"],
    .billing-form input[type="email"],
    .billing-form input[type="tel"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1em;
      background-color: #f2f2f2;
      color: #333;
    }

    .billing-form .checkbox {
      display: flex;
      align-items: center;
      font-size: 0.9em;
      margin-top: 10px;
    }

    .address-card {
      background-color: #f9f9f9;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .address-card h3 {
      font-size: 1.5em;
      margin-bottom: 20px;
    }

    .address-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #ddd;
    }

    .address-item:last-child {
      border-bottom: none;
    }

    .address-details p {
      margin: 0;
      color: #333;
    }

    .address-actions {
      display: flex;
      align-items: center;
    }

    .address-actions .btn {
      margin-right: 10px;
    }

    .address-actions i {
      cursor: pointer;
      color: #555;

    }

    .address-actions i:hover {
      color: #333;
    }

    .cart-item img {
      width: 120px;
      height: 180px;
      object-fit: cover;
      border-radius: 4px;
      margin-right: 15px;
    }

    .order-summary {
      flex: 1;
      min-width: 300px;
      background-color: #f3f3f3;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .order-summary h3 {
      font-size: 1.3em;
      margin-bottom: 20px;
    }

    .order-summary .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-size: 0.9em;
    }

    .order-summary .summary-item .label {
      color: #666;
    }

    .order-summary .summary-item .value {
      font-weight: bold;
    }

    .order-summary .radio-group {
      margin: 15px 0;
    }

    .order-summary .radio-group label {
      font-size: 0.9em;
      margin-right: 10px;
    }

    .coupon-section {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }

    .order-summary input[type="text"] {
      flex: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1em;
      background-color: #f2f2f2;
      color: #333;
    }

    .order-summary .apply-coupon-btn ,.remove-coupon-btn{
      padding: 10px 15px;
      background-color: #b58d8e;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.9em;
    }

    .order-summary .apply-coupon-btn:hover {
      background-color: #9f7879;
    }

    .place-order-btn {
      width: 100%;
      padding: 12px;
      background-color: #b58d8e;
      color: white;
      border: none;
      border-radius: 4px;
      font-size: 1em;
      cursor: pointer;
      text-align: center;
      margin-top: 10px;
    }

    .place-order-btn:hover {
      background-color: #9f7879;

    }

    .error-box {
      color: red;
      font-size: 0.9rem;
      margin-top: 2px;
    }
  </style>
</head>

<body>
  {{> user/header}}

  <div class="container">
    <div class="my-4">
      <ol class="breadcrumb"
        style="background-color: transparent; font-size: 0.9rem; font-family: 'Poppins', sans-serif; color: #6c757d;">
        {{#each breadcrumbs}}
        {{#if url}}
        <li class="breadcrumb-item"><a href="{{url}}" style="color: #6c757d; text-decoration: none;">{{name}}</a></li>
        {{else}}
        <li class="breadcrumb-item active" aria-current="page" style="color: #6c757d;">{{name}}</li>
        {{/if}}
        {{/each}}
      </ol>
    </div>
  </div>

  <div class="container p-5">
    <div id="container">
      <div class="card billing-form">
        <h2> Add Addresses </h2>
        <form action="{{#if book}}/addAddress/{{book._id}}{{else}}/addAddress{{/if}}" method="post"
          onsubmit="return validateAddressForm()">
          <label for="name">Name</label>
          <input type="text" id="name" placeholder="Name" name="name">
          <span id="name-error" class="error-box"></span>

          <label for="company">Company or House Name</label>
          <input type="text" id="company" placeholder="Company or House Name" name="houseName">
          <span id="company-error" class="error-box"></span>

          <label for="city">Town or city</label>
          <input type="text" id="city" placeholder="Street No or Name" name="city">
          <span id="city-error" class="error-box"></span>

          <label for="landmark">Landmark</label>
          <input type="text" id="landmark" placeholder="landmark" name="landmark">
          <span id="landmark-error" class="error-box"></span>

          <label for="state">State</label>
          <input type="text" id="state" placeholder="State" name="state">
          <span id="state-error" class="error-box"></span>

          <label for="pincode">Pincode</label>
          <input type="text" id="pincode" placeholder="Pincode" name="pincode">
          <span id="pincode-error" class="error-box"></span>

          <label for="phone">Phone</label>
          <input type="tel" id="phone" placeholder="Phone" name="phone">
          <span id="phone-error" class="error-box"></span>

          <label for="altPhone">Alt phone</label>
          <input type="tel" id="altPhone" placeholder="Alternative phone number" name="altPhone">
          <span id="altPhone-error" class="error-box"></span>

          <button class="place-order-btn">Add</button>
        </form>


      </div>

      <div>
        <div class="card address-card">
          <form id="placeOrderForm">
            <h3>Select Address</h3>
            {{#if addresses.length}}
            {{#each addresses}}

            <div class="address-item">
              <div class="address-details">
                <p><strong>{{this.name}}</strong></p>
                <p>{{this.houseName}}, {{this.city}}</p>
                <p>{{this.landMark}}, {{this.state}}</p>
                <p>Pin: {{this.pincode}}</p>
                <p>Ph:{{this.phone}}, {{this.altPhone}}</p>
              </div>

              <div class="address-actions">
                <label for="selectAddress">select </label>
                <input type="radio" name="selectedAddress" class="select-address" value="{{this.id}}">
                <i class="fa fa-edit edit-address" data-id="{{this.id}}"></i>
                <i class="fa fa-trash delete-icon" title="Remove address" onclick="deleteAddress('{{this.id}}')"></i>
              </div>
            </div>
            {{/each}}
            {{else}}
            <p>no saved addresses</p>
            {{/if}}
            <div id="addressError" class="error-box"></div>

        </div>

        <div class="order-summary">

          <h3>Order Summary</h3>
          {{#if book}}
          <input type="hidden" name="bookId" value="{{book._id}}">
          <div class="cart-item">
            <img src="/uploads/product-images/{{book.productImage.[0]}}" alt="{{book.bookName}}">
            <p>{{book.bookName}}</p>
          </div>
          <div class="summary-item">
            <span class="label">Book Price</span>
            <span class="value">{{book.salePrice}}</span>
          </div>
          <div class="summary-item">
            <span class="label">Offer discount</span>
            <span class="value">{{#if offer }}{{offer.discount}}% {{else}}none {{/if}} </span>
          </div>
          <div class="summary-item">
            <span class="label">Delivery Charge</span>
            <span class="value">Free</span>
          </div>
           <div class="summary-item">
            <span class="label">coupon  Discount</span>
            <span id="couponPrice" class="value">0%</span>
          </div>
          <div class="summary-item">
            <span class="label">Total Price</span>
            <span id="totalAmount" class="value">{{Bookprice}}</span>
          </div>
          {{/if}}


          {{#if cart}}
          <div class="summary-item">
            <input type="hidden" name="cartId" value="{{cart._id}}">

            <span class="label">Book Price</span>
            <span class="value">{{Bookprice}}</span>
          </div>
          <!--<div class="summary-item">
            <span class="label">Offers</span>
            <span class="value">{{#if offer }}{{offer.discount}}% {{else}}none {{/if}} </span>
          </div>-->
          <div class="summary-item">
            <span class="label">Delivery Charge</span>
            <span class="value">Free</span>
          </div>
          <div class="summary-item">
            <span class="label">coupon  Discount</span>
            <span id="couponPrice" class="value">0%</span>
          </div>
          <div class="summary-item">
            <span class="label">Total Price</span>
            <span id="totalAmount" class="value">{{Bookprice}}</span>
          </div>

          {{/if}}
          <div class="radio-group">
            <input type="hidden" id="orderAmount" value="{{Bookprice}}">
            <label><input type="radio" name="paymentMethod" value="cash-on-delivery"> Cash on Delivery</label>
            <label><input type="radio" name="paymentMethod" value="wallet"> Use My Wallet</label>
            <label><input type="radio" name="paymentMethod" value="online"> Pay now</label>

            <div id="paymentError" class="error-box"></div>
          </div>


          <div class="coupon-section">
            <input type="text" id="couponCode" placeholder="Enter Coupon Code">
            <button class="apply-coupon-btn" onclick="applyCoupon(event)">Apply Coupon</button>
            <button class="remove-coupon-btn" onclick="removeCoupon(event)">Remove Coupon</button>

          </div>
          <a href="/availableCoupons">Check Available coupons</a>


          <div id="addressError" style="color: red;"></div>
          <div id="paymentError" style="color: red;"></div>
          <button type="button" class="place-order-btn" id="placeOrderButton">Place Order</button>
          </form>
        </div>

      </div>
    </div>
  </div>


  {{> user/footer}}


  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
    document.getElementById("placeOrderButton").addEventListener("click", function () {
    
      const formData = new FormData(document.getElementById("placeOrderForm"));

      const orderData = {
        cartId: formData.get("cartId"),
        bookId: formData.get("bookId"),
        selectedAddress: formData.get("selectedAddress"),
        paymentMethod: formData.get("paymentMethod"),
        couponCode: document.getElementById("couponCode").value
      };

        if (!orderData.selectedAddress) {
    document.getElementById("paymentError").innerText = "Please selecte your address  .";
    return;
  }


        if (!orderData.paymentMethod) {
    document.getElementById("paymentError").innerText = "Please selecte the  payment methode   .";
    return;
  }




      if (orderData.paymentMethod === "online") {
        fetch("/place-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(orderData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              // Handle errors
              if (data.error.address) {
                document.getElementById("addressError").textContent = data.error.address;
              }
              if (data.error.payment) {
                document.getElementById("paymentError").textContent = data.error.payment;
              }
            } else {
              // Trigger Razorpay checkout if order creation was successful
              const razorpayOrderId = data.razorpayOrderId;

              const options = {
                key: "rzp_test_4MBYamMKeUifHI",    // Replace with your Razorpay Key ID
                amount: data.finalAmount * 100, // Convert to paise
                currency: "INR",
                order_id: razorpayOrderId, // Order ID generated by Razorpay
                name: "READVIBES",  // Your company's name
                description: "Order Payment",
                image: "https://example.com/logo.png",
                handler: function (response) {
                  // If payment is successful, redirect to the order success page
                  console.log(data.orderId)
                  const paymentData = {
                    orderId: data.orderId,
                    razorpayPaymentId: response.razorpay_payment_id,
                    razorpayOrderId: razorpayOrderId,
                    razorpaySignature: response.razorpay_signature
                  };

                  fetch("/verify-payment", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json"
                    },
                    body: JSON.stringify(paymentData)
                  })
                    .then(response => response.json())
                    .then(data => {
                      if (data.success) {
                        window.location.href = "/orderSuccess";  // Redirect to order success page
                      } else {
                        alert("Payment verification failed. Please try again.");
                      }
                    })
                    .catch(error => {
                      console.error("Error verifying payment:", error);
                    });
                },
                prefill: {
                  name: "Name",  // Replace with actual customer name
                  email: "customer@example.com",  // Replace with actual customer email
                  contact: "1234567890"  // Replace with actual customer contact number
                },
                notes: {
                  address: orderData.selectedAddress
                },
                theme: {
                  color: "#b58d8e"  // Optional: Custom theme color
                }
              };

              // Initialize Razorpay Checkout
              const rzp1 = new Razorpay(options);
              rzp1.open();
            }
          })
          .catch(error => {
            console.error("Error placing order:", error);
          });
      } else if (orderData.paymentMethod === "cash-on-delivery") {
        // Handle Cash on Delivery (COD) case
        fetch("/place-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(orderData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              // Handle errors for COD order creation
              if (data.error.address) {
                document.getElementById("addressError").textContent = data.error.address;
              }
              if (data.error.payment) {
                document.getElementById("paymentError").textContent = data.error.payment;
              }
            } else {
              // For COD, simply redirect to order success page after successful order creation
              window.location.href = "/orderSuccess";
            }
          })
          .catch(error => {
            console.error("Error placing order:", error);
          });
      }
       else if (orderData.paymentMethod === "wallet") {
        // Handle Cash on Delivery (COD) case
        fetch("/place-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(orderData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              // Handle errors for COD order creation
              if (data.error.address) {
                document.getElementById("addressError").textContent = data.error.address;
              }
              if (data.error.payment) {
                document.getElementById("paymentError").textContent = data.error.payment;
              }
            } else {
              // For COD, simply redirect to order success page after successful order creation
              window.location.href = "/orderSuccess";
            }
          })
          .catch(error => {
            console.error("Error placing order:", error);
          });
      }
    });
  </script>


  <script>

    document.querySelector('input[name="paymentMethod"]').addEventListener('change', function () {
      if (this.value === 'cash-on-delivery') {
        const amount = document.getElementById('orderAmount').value;
        fetch('/validate-cash-on-delivery', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ amount: amount }),
        })
          .then((response) => response.json())
          .then((data) => {
            const errorElement = document.getElementById('paymentError');
            if (data.error) {
              errorElement.textContent = data.error;
            } else {
              errorElement.textContent = ''; // Clear any error message
            }
          })
          .catch((error) => console.error('Error:', error));
      }
    });


 // Select all radio buttons with name 'paymentMethod'
const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');

// Attach change event listener to each radio button
paymentMethods.forEach((radio) => {
  radio.addEventListener('change', function () {
    if (this.value === 'wallet') {
      const amount = document.getElementById('orderAmount').value;

      // Send a POST request to validate wallet balance
      fetch('/validate-wallet', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ amount: amount }),
      })
        .then((response) => response.json())
        .then((data) => {
          const errorElement = document.getElementById('paymentError');
          if (data.error) {
            errorElement.textContent = data.error; // Display error message
          } else {
            errorElement.textContent = ''; // Clear error message
          }
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    }
  });
});


    async function applyCoupon(event) {
      event.preventDefault();

      // Get coupon code and total amount
      const couponCode = document.getElementById("couponCode").value;
      let totalAmount = parseFloat(document.getElementById("totalAmount").innerText);
      console.log("Total Amount:", totalAmount);
       if (!couponCode) {
    document.getElementById("paymentError").innerText = "Please enter a coupon code .";
    return;
  }


      try {
        const response = await fetch('/applyCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ couponCode, totalAmount })
        });

        // Check if the response is ok (status code 200-299)
        if (!response.ok) {
          const errorData = await response.json(); // assuming server returns JSON with error message
          console.error("Server error response:", errorData.message || "Unknown error");
          document.getElementById("paymentError").innerText = "Error applying coupon: " + (errorData.message || "Unknown error");
          return;
        }

        // Parse the response JSON
        const data = await response.json();
        console.log("Response data:", data);

        // Check if discount data is present
        if (data && typeof data.discount === 'number') {
          const discountedAmount = totalAmount * data.discount;
          document.getElementById("totalAmount").innerText = discountedAmount.toFixed(2);
          document.getElementById("couponPrice").innerText = 100 - (data.discount * 100 ) + "%";


          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: data.message,
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
          });
        } else {
          console.error("Invalid discount data:", data);
          document.getElementById("paymentError").innerText = "Invalid response data";
        }

      } catch (error) {
        console.error('Error applying coupon:', error);
        document.getElementById("paymentError").innerText = 'Error applying coupon';
      }
    }






async function removeCoupon(event) {
  event.preventDefault();

  // Get coupon code
  const couponCode = document.getElementById("couponCode").value;
   let totalAmount = parseFloat(document.getElementById("totalAmount").innerText);

  if (!couponCode) {
    document.getElementById("paymentError").innerText = "Please enter a coupon code to remove.";
    return;
  }

  try {
    const response = await fetch('/removeCoupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ couponCode ,totalAmount }),
    });

    // Check if the response is ok (status code 200-299)
    if (!response.ok) {
      const errorData = await response.json(); // assuming server returns JSON with error message
      console.error("Server error response:", errorData.message || "Unknown error");
      document.getElementById("paymentError").innerText = "Error removing coupon: " + (errorData.message || "Unknown error");
      return;
    }

    // Parse the response JSON
    const data = await response.json();
    console.log("Response data:", data);

    if (data && typeof data.discount === 'number') {
      // Clear the input field
      document.getElementById("couponCode").value = "";

      const discountedAmount = totalAmount / data.discount;
          document.getElementById("totalAmount").innerText = discountedAmount.toFixed(2);
           document.getElementById("couponPrice").innerText =  "0%";


      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'success',
        title: data.message,
        showConfirmButton: false,
        timer: 1500,
        timerProgressBar: true,
      });
    } else {
      console.error("Invalid response data:", data);
      document.getElementById("paymentError").innerText = "Invalid response data";
    }
  } catch (error) {
    console.error('Error removing coupon:', error);
    document.getElementById("paymentError").innerText = 'Error removing coupon';
  }
}



  </script>

  <script>

    async function deleteAddress(addressId) {
      try {
        const confirmation = await Swal.fire({
          title: 'Are you sure?',
          text: "Do you want to remove this address from your list?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel'
        });

        if (!confirmation.isConfirmed) {
          return;
        }
        const response = await fetch(`/address/delete/${addressId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error('Failed to delete address');
        }

        const result = await response.json();
        if (result.success) {
          const addressElement = document.querySelector(`.delete-icon[onclick="deleteAddress('${addressId}')"]`).closest('.address-item');
          if (addressElement) {
            addressElement.remove();
            Swal.fire({
              icon: 'success',
              title: 'Deleted!',
              text: 'Address has been removed successfully.',
              showConfirmButton: false,
              timer: 1500
            });
          } else {
            console.error('Address element not found for ID:', addressId);
          }
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: result.message || 'Unable to delete address',
          });
        }
      } catch (error) {
        console.error('Error deleting address:', error);
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'An error occurred while deleting the address. Please try again.',
        });
      }
    }


    /* document.getElementById("placeOrderButton").addEventListener("click", function () {
       const formData = new FormData(document.getElementById("placeOrderForm"));
 
       const orderData = {
         cartId: formData.get("cartId"),
         bookId: formData.get("bookId"),
         selectedAddress: formData.get("selectedAddress"),
         paymentMethod: formData.get("paymentMethod"),
         couponCode: document.getElementById("couponCode").value
        
 
       };
 
       fetch("/place-order", {
         method: "POST",
         headers: {
           "Content-Type": "application/json"
         },
         body: JSON.stringify(orderData)
       })
         .then(response => response.json())
         .then(data => {
           if (data.error) {
             if (data.error.address) {
               document.getElementById("addressError").textContent = data.error.address;
             }
             if (data.error.payment) {
               document.getElementById("paymentError").textContent = data.error.payment;
             }
           } else {
             // Redirect to order details page
             window.location.href = `/orderSuccess`;
           }
         })
         .catch(error => {
           console.error("Error placing order:", error);
         });
     });*/





    function validateAddressForm() {
      let valid = true;

      const name = document.getElementById("name").value.trim();
      const company = document.getElementById("company").value.trim();
      const city = document.getElementById("city").value.trim();
      const landmark = document.getElementById("landmark").value.trim();
      const state = document.getElementById("state").value.trim();
      const pincode = document.getElementById("pincode").value.trim();
      const phone = document.getElementById("phone").value.trim();
      const altPhone = document.getElementById("altPhone").value.trim();

      if (!name) {
        document.getElementById("name-error").innerText = "Name is required.";
        valid = false;
      } else {
        document.getElementById("name-error").innerText = "";
      }
      if (!company) {
        document.getElementById("company-error").innerText = "Hause name or company name is required.";
        valid = false;
      } else {
        document.getElementById("company-error").innerText = "";
      }

      if (!city) {
        document.getElementById("city-error").innerText = "Town or city is required.";
        valid = false;
      } else {
        document.getElementById("city-error").innerText = "";
      }

      if (!state) {
        document.getElementById("state-error").innerText = "State is required.";
        valid = false;
      } else {
        document.getElementById("state-error").innerText = "";
      }

      if (pincode.length !== 6 || isNaN(pincode)) {
        document.getElementById("pincode-error").innerText = "Pincode must be a 6-digit number.";
        valid = false;
      } else {
        document.getElementById("pincode-error").innerText = "";
      }

      const phoneRegex = /^[0-9]{10}$/;
      if (!phoneRegex.test(phone)) {
        document.getElementById("phone-error").innerText = "Phone number must be a 10-digit number.";
        valid = false;
      } else {
        document.getElementById("phone-error").innerText = "";
      }

      if (altPhone && !phoneRegex.test(altPhone)) {
        document.getElementById("altPhone-error").innerText = "Alternative phone number must be a 10-digit number if provided.";
        valid = false;
      } else {
        document.getElementById("altPhone-error").innerText = "";
      }

      return valid; // Form is valid if 'valid' remains true
    }


  </script>


  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
    integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


</body>

</html>
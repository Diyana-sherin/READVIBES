<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Orders</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
        }

        .order-list {
            max-width: 800px;
            margin: auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .order-section {
            margin-bottom: 20px;
            padding: 15px;
            border-bottom: 2px solid #ddd;
        }

        .order-section:last-child {
            border-bottom: none;
        }

        .order-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #ddd;
        }

        .order-card {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;

        }

        .order-item:last-child {
            border-bottom: none;
        }

        .book-image {
            width: 80px;
            height: 100px;
            object-fit: cover;
            margin-right: 20px;
            border-radius: 5px;
        }

        .order-details {
            flex: 1;
        }

        .order-details h3 {
            margin: 0 0 5px;
        }

        .order-details p {
            margin: 5px 0;
            font-size: 14px;
        }

        .order-actions {
            display: flex;
            justify-content: flex-end;
        }

        .order-actions button {
            background-color: #a72828;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .order-actions button:hover {
            background-color: #a72828;
        }

        .status {
            font-weight: bold;
        }

        .status.Delivered {
            color: green;
        }

        .status.Shipped {
            color: green;
        }

        .status.Pending {
            color: orange;
        }

        .status.Processing {
            color: orange;
        }

        .status.Canceled {
            color: red;
        }
    </style>
</head>

<body>
    {{> user/header}}
    <div class="container-fluid p-5">
        <div class="row">
            <div class="col-md-3">
                <div class="list-group">
                    <a href="/profile" class="list-group-item list-group-item-action">Profile</a>
                    <a href="/wallet" class="list-group-item list-group-item-action">Wallet</a>
                    <a href="/myorders" class="list-group-item list-group-item-action">My orders</a>
                    <a href="/availableCoupons" class="list-group-item list-group-item-action">coupons</a>
                </div>
            </div>

            <div class="col-md-9 p-5">
                <h2>Order History</h2>
                <!-- Filter Section -->
                <div class="filter-status">
                    <label><input type="radio" name="orderStatus" value="All" checked> All</label>
                    <label><input type="radio" name="orderStatus" value="Pending"> Pending</label>
                    <label><input type="radio" name="orderStatus" value="Processing"> Processing</label>
                    <label><input type="radio" name="orderStatus" value="Shipped"> Shipped</label>
                    <label><input type="radio" name="orderStatus" value="Delivered"> Delivered</label>
                    <label><input type="radio" name="orderStatus" value="Cancel Request"> Cancel Request</label>
                    <label><input type="radio" name="orderStatus" value="Cancelled"> Cancelled</label>
                    <label><input type="radio" name="orderStatus" value="Return Request"> Return Request</label>
                    <label><input type="radio" name="orderStatus" value="Returned"> Returned</label>
                </div>

                <!-- Dynamic Orders Section -->
                <div class="filtered-orders">
                    {{#if orderItems.length}}
                    {{#each orderItems as |order|}}
                    <div class="order-card">
                        {{#each order.items as |item|}}
                        <div class="order-item">
                            <img src="/uploads/product-images/{{item.productImage}}" alt="Book Image"
                                class="book-image">
                            <div class="order-details">
                                <h5>{{item.bookName}}</h5>
                                <p>Quantity: {{item.quantity}}</p>
                                <p>Price: Rs {{item.price}}</p>
                                <p>Offer Discount: {{item.offerDiscount}}%</p>
                                <p>Offer Price: Rs {{item.offerPrice}}</p>
                            </div>
                        </div>
                        {{/each}}
                        <div class="order-section">
                            <p>Shipping Address: {{order.userAddress}}</p>
                            <p class="status {{order.status}}">Status: {{order.status}}</p>
                            <p>Payment Method: {{order.paymentMethod}}</p>
                            <p>Total Price: Rs {{order.totalPrice}}</p>
                              <p>Coupon Discount: Rs {{order.couponDiscount}}</p>
                            <p>Final Amount: Rs {{order.finalAmount}}</p>
                            <div class="order-actions">
                                {{#if (and (or (eq order.status "Pending") (eq order.status "Processing")) (not
                                order.reason))}}
                                <input type="hidden" value="{{order.id}}" class="orderId">
                                <button type="button" class="cancelOrderBtn">Cancel Order</button>
                                {{else if (and (or (eq order.status "Shipped") (eq order.status "Delivered")) (not
                                order.reason))}}
                                <input type="hidden" value="{{order.id}}" class="orderId">
                                <button type="button" class="returnOrdeBtn">Return Order</button>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                    {{/each}}
                    {{else}}
                    <p>{{message}}</p>
                    {{/if}}
                </div>
            </div>



        </div>
    </div>

    {{> user/footer}}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Function to fetch and filter orders based on status
        function filterOrders() {
            document.querySelectorAll('input[name="orderStatus"]').forEach(radio => {
                radio.addEventListener('change', async function () {
                    const status = this.value;

                    try {
                        const response = await fetch(`/filter-orders?status=${status}`);
                        const data = await response.json();

                        if (data.success) {
                            const ordersContainer = document.querySelector('.filtered-orders');
                            ordersContainer.innerHTML = data.orderItems.length > 0
                                ? data.orderItems.map(order => `
                                    <div class="order-card">
                                        ${order.items.map(item => `
                                            <div class="order-item">
                                                <img src="/uploads/product-images/${item.productImage}" alt="Book Image" class="book-image">
                                                <div class="order-details">
                                                    <h5>${item.bookName}</h5>
                                                    <p>Quantity: ${item.quantity}</p>
                                                    <p>Price: Rs ${item.price}</p>
                                                    <p>Offer Discount: ${item.offerDiscount}%</p>
                                                    <p>Offer Price: Rs ${item.offerPrice}</p>
                                                </div>
                                            </div>
                                        `).join('')}
                                        <div class="order-section">
                                            <p>Shipping Address: ${order.userAddress}</p>
                                            <p class="status ${order.status}">Status: ${order.status}</p>
                                            <p>Payment Method: ${order.paymentMethod}</p>
                                            <p>Total Price: Rs ${order.totalPrice}</p>
                                             <p>Coupon Discount: Rs ${order.couponDiscount}</p>
                                            <p>Final Amount: Rs ${order.finalAmount}</p>
                                            <div class="order-actions">
                                                ${(() => {
                                                    if ((order.status === "Pending" || order.status === "Processing") && !order.reason) {
                                                        return `
                                                            <input type="hidden" value="${order.id}" class="orderId">
                                                            <button type="button" class="cancelOrderBtn">Cancel Order</button>
                                                        `;
                                                    } else if ((order.status === "Shipped" || order.status === "Delivered") && !order.reason) {
                                                        return `
                                                            <input type="hidden" value="${order.id}" class="orderId">
                                                            <button type="button" class="returnOrderBtn">Return Order</button>
                                                        `;
                                                    } else {
                                                        return '';
                                                    }
                                                })()}
                                            </div>
                                        </div>
                                    </div>
                                `).join('')
                                : `<p>No orders found for the selected status.</p>`;

                            // Reinitialize event listeners for dynamically added buttons
                            initializeCancelOrderButtons();
                            initializeReturnOrderButtons();
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Unable to fetch orders. Please try again later.',
                                icon: 'error',
                                confirmButtonColor: '#3085d6',
                            });
                        }
                    } catch (error) {
                        console.error('Error fetching orders:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6',
                        });
                    }
                });
            });
        }

        // Function to handle cancel order
        function initializeCancelOrderButtons() {
            document.querySelectorAll('.cancelOrderBtn').forEach(button => {
                button.addEventListener('click', async function () {
                    const orderId = this.previousElementSibling.value;

                    try {
                        const confirmCancel = await Swal.fire({
                            title: 'Are you sure?',
                            text: "Do you really want to cancel this order?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, cancel it!',
                            cancelButtonText: 'No, keep it'
                        });

                        if (confirmCancel.isConfirmed) {
                            window.location.href = `/cancel-orders/${orderId}`;
                        }
                    } catch (error) {
                        console.error("Error canceling order:", error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                });
            });
        }

        // Function to handle return order
        function initializeReturnOrderButtons() {
            document.querySelectorAll('.returnOrderBtn').forEach(button => {
                button.addEventListener('click', async function () {
                    const orderId = this.previousElementSibling.value;

                    try {
                        const confirmReturn = await Swal.fire({
                            title: 'Are you sure?',
                            text: "Do you really want to return this order?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, return it!',
                            cancelButtonText: 'No, keep it'
                        });

                        if (confirmReturn.isConfirmed) {
                            window.location.href = `/return-orders/${orderId}`;
                        }
                    } catch (error) {
                        console.error("Error returning order:", error);
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonColor: '#3085d6'
                        });
                    }
                });
            });
        }

        // Initialize everything on page load
        filterOrders();
        initializeCancelOrderButtons();
        initializeReturnOrderButtons();
    });
</script>




   
                      
            
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
</body>

</html>